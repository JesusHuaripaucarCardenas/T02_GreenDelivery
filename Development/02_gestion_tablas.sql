-- TABLA DE ROLES

CREATE TABLE role (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(50) NOT NULL,
    description VARCHAR2(250),
    status CHAR(1) DEFAULT 'A' NOT NULL,
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla role
ALTER TABLE role ADD CONSTRAINT uk_role_name UNIQUE (name);
ALTER TABLE role ADD CONSTRAINT ck_role_status CHECK (status IN ('A','I'));
ALTER TABLE role ADD CONSTRAINT ck_role_name_length CHECK (LENGTH(name) >= 3);

-- TABLA DE USUARIOS UNIFICADA

CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR2(150) NOT NULL,
    password VARCHAR2(250) NOT NULL,
    role_id NUMBER NOT NULL,
    name VARCHAR2(100) NOT NULL,
    last_name VARCHAR2(100) NOT NULL,
    birthdate DATE,
    phone VARCHAR2(15),
    sex VARCHAR2(10),
    document_type CHAR(3) DEFAULT 'DNI' NOT NULL,
    document_number VARCHAR2(20),
    creation_register TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    alternative_phone VARCHAR2(15),
    company_name VARCHAR2(50),
    license VARCHAR2(20),
    hire_date DATE,
    average_grade NUMBER(3,2) DEFAULT 0.00,
    total_deliveries NUMBER DEFAULT 0,
    status CHAR(1) DEFAULT 'A' NOT NULL
);

-- Restricciones de la tabla users
ALTER TABLE users ADD CONSTRAINT uk_users_email UNIQUE (email);
ALTER TABLE users ADD CONSTRAINT uk_users_document UNIQUE (document_type, document_number);
ALTER TABLE users ADD CONSTRAINT uk_users_license UNIQUE (license);
ALTER TABLE users ADD CONSTRAINT ck_users_email CHECK (email LIKE '%@%');
ALTER TABLE users ADD CONSTRAINT ck_users_status CHECK (status IN ('A','I','S'));
ALTER TABLE users ADD CONSTRAINT ck_users_sex CHECK (sex IN ('masculino', 'femenino', 'otro'));
ALTER TABLE users ADD CONSTRAINT ck_users_document_type CHECK (document_type IN ('DNI', 'RUC', 'CNE'));
ALTER TABLE users ADD CONSTRAINT ck_users_grade CHECK (average_grade BETWEEN 0.00 AND 5.00);
ALTER TABLE users ADD CONSTRAINT ck_users_deliveries CHECK (total_deliveries >= 0);
ALTER TABLE users ADD CONSTRAINT ck_users_phone CHECK (REGEXP_LIKE(phone, '^[0-9+\-\s()]+$'));
ALTER TABLE users ADD CONSTRAINT ck_users_driver_fields CHECK (
    (role_id != 3) OR
    (role_id = 3 AND document_number IS NOT NULL AND license IS NOT NULL AND hire_date IS NOT NULL)
);

-- Índices adicionales para users
CREATE INDEX idx_users_role ON users(role_id);
CREATE INDEX idx_users_status ON users(status);
CREATE INDEX idx_users_document_number ON users(document_number);
CREATE INDEX idx_users_creation_date ON users(creation_register);

-- TABLA DE PEDIDOS

CREATE TABLE orders (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    users_id NUMBER NOT NULL,
    order_code VARCHAR2(20) NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    requested_delivery_date DATE,
    priority CHAR(1) DEFAULT 'N' NOT NULL,
    subtotal NUMBER(10,2) DEFAULT 0.00,
    shipping_cost NUMBER(8,2) DEFAULT 0.00,
    total NUMBER(10,2) DEFAULT 0.00,
    status CHAR(1) DEFAULT 'R' NOT NULL
);

-- Restricciones de la tabla orders
ALTER TABLE orders ADD CONSTRAINT uk_orders_code UNIQUE (order_code);
ALTER TABLE orders ADD CONSTRAINT ck_orders_priority CHECK (priority IN ('B','N','A','U'));
ALTER TABLE orders ADD CONSTRAINT ck_orders_status CHECK (status IN ('R','C','P','T','E','X'));
ALTER TABLE orders ADD CONSTRAINT ck_orders_amounts CHECK (subtotal >= 0 AND shipping_cost >= 0 AND total >= 0);
ALTER TABLE orders ADD CONSTRAINT ck_orders_total CHECK (total = subtotal + shipping_cost);
ALTER TABLE orders ADD CONSTRAINT ck_orders_delivery_date CHECK (requested_delivery_date >= TRUNC(order_date));
ALTER TABLE orders ADD CONSTRAINT ck_orders_code_format CHECK (REGEXP_LIKE(order_code, '^[A-Z0-9\-]+$'));

-- Índices para orders
CREATE INDEX idx_orders_client ON orders(users_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_date ON orders(order_date);
CREATE INDEX idx_orders_priority ON orders(priority);

-- TABLA DE DETALLE DE PEDIDOS

CREATE TABLE order_details (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orders_id NUMBER NOT NULL,
    quantity NUMBER DEFAULT 1 NOT NULL,
    unit_price NUMBER(10,2)
);

-- Restricciones de la tabla order_details
ALTER TABLE order_details ADD CONSTRAINT ck_order_details_quantity CHECK (quantity > 0);
ALTER TABLE order_details ADD CONSTRAINT ck_order_details_price CHECK (unit_price >= 0 OR unit_price IS NULL);


-- TABLA DE PRODUCTOS

CREATE TABLE product (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orders_id NUMBER NOT NULL,
    code VARCHAR2(20) NOT NULL,
    name VARCHAR2(30) NOT NULL,
    description VARCHAR2(100),
    unit_weight NUMBER(6,3),
    fragile CHAR(1) DEFAULT 'N' NOT NULL,
    cooled CHAR(1) DEFAULT 'N' NOT NULL,
    reference_price NUMBER(10,2),
    date_register TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    status CHAR(1) DEFAULT 'A' NOT NULL
);

-- Restricciones de la tabla product
ALTER TABLE product ADD CONSTRAINT uk_product_code UNIQUE (code);
ALTER TABLE product ADD CONSTRAINT ck_product_fragile CHECK (fragile IN ('S','N')); -- S=Sí, N=No
ALTER TABLE product ADD CONSTRAINT ck_product_cooled CHECK (cooled IN ('S','N')); -- S=Sí, N=No
ALTER TABLE product ADD CONSTRAINT ck_product_status CHECK (status IN ('A','I')); -- A=Activo, I=Inactivo
ALTER TABLE product ADD CONSTRAINT ck_product_weight CHECK (unit_weight > 0 OR unit_weight IS NULL);
ALTER TABLE product ADD CONSTRAINT ck_product_price CHECK (reference_price >= 0 OR reference_price IS NULL);
ALTER TABLE product ADD CONSTRAINT ck_product_name_length CHECK (LENGTH(name) >= 2);


-- TABLA DE DIRECCIONES

CREATE TABLE address (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    street VARCHAR2(200) NOT NULL,
    "number" VARCHAR2(10),
    district VARCHAR2(100) NOT NULL,
    postal_code NUMBER,
    reference VARCHAR2(250),
    latitude NUMBER(10,8),
    length NUMBER(11,8),
    creation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    orders_id NUMBER NOT NULL
);

-- Restricciones de la tabla address
ALTER TABLE address ADD CONSTRAINT uk_address_location UNIQUE (street, "number", district);
ALTER TABLE address ADD CONSTRAINT ck_address_latitude CHECK (latitude BETWEEN -90 AND 90 OR latitude IS NULL);
ALTER TABLE address ADD CONSTRAINT ck_address_longitude CHECK (length BETWEEN -180 AND 180 OR length IS NULL);
ALTER TABLE address ADD CONSTRAINT ck_address_postal_code CHECK (postal_code > 0 OR postal_code IS NULL);
ALTER TABLE address ADD CONSTRAINT ck_address_street_length CHECK (LENGTH(street) >= 5);

-- Índices para address
CREATE INDEX idx_address_district ON address(district);
CREATE INDEX idx_address_postal_code ON address(postal_code);


-- TABLA DE DIRECCIONES DE USUARIOS

CREATE TABLE user_addresses (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    users_id NUMBER NOT NULL,
    address_id NUMBER NOT NULL,
    alias VARCHAR2(20),
    is_main CHAR(1) DEFAULT 'N' NOT NULL,
    status CHAR(1) DEFAULT 'A' NOT NULL,
    date_register TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla user_addresses
ALTER TABLE user_addresses ADD CONSTRAINT uk_user_addresses UNIQUE (users_id, address_id);
ALTER TABLE user_addresses ADD CONSTRAINT ck_user_addresses_is_main CHECK (is_main IN ('S','N')); -- S=Principal, N=Secundaria
ALTER TABLE user_addresses ADD CONSTRAINT ck_user_addresses_status CHECK (status IN ('A','I')); -- A=Activo, I=Inactivo


-- TABLA DE SEGUIMIENTO DE ESTADOS

CREATE TABLE status_tracking (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orders_id NUMBER NOT NULL,
    previous_status VARCHAR2(20),
    new_status VARCHAR2(20) NOT NULL,
    "comment" VARCHAR2(200),
    "user" VARCHAR2(100),
    change_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla status_tracking
ALTER TABLE status_tracking ADD CONSTRAINT ck_st_statuses_different CHECK (previous_status != new_status OR previous_status IS NULL);


-- TABLA DE ENTREGAS

CREATE TABLE deliveries (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orders_id NUMBER NOT NULL,
    departure_time TIMESTAMP,
    delivery_time TIMESTAMP,
    delivery_cost NUMBER(8,2),
    distance_traveled NUMBER(6,2),
    status CHAR(1) DEFAULT 'A' NOT NULL
);

-- Restricciones de la tabla deliveries
ALTER TABLE deliveries ADD CONSTRAINT ck_deliveries_status CHECK (status IN ('A','R','T','E','F','P')); -- A=Asignada, R=Recogida, T=Tránsito, E=Entregada, F=Fallida, P=Reprogramada
ALTER TABLE deliveries ADD CONSTRAINT ck_deliveries_cost CHECK (delivery_cost >= 0 OR delivery_cost IS NULL);
ALTER TABLE deliveries ADD CONSTRAINT ck_deliveries_distance CHECK (distance_traveled >= 0 OR distance_traveled IS NULL);
ALTER TABLE deliveries ADD CONSTRAINT ck_deliveries_times CHECK (delivery_time >= departure_time OR delivery_time IS NULL OR departure_time IS NULL);


-- TABLA DE VEHÍCULOS

CREATE TABLE vehicle (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    plate VARCHAR2(10) NOT NULL,
    vehicle_type VARCHAR2(20) NOT NULL,
    brand VARCHAR2(50),
    model VARCHAR2(50),
    year NUMBER(4),
    load_capacity NUMBER(7,2) DEFAULT 0,
    last_revision_date DATE,
    next_review DATE,
    maturity_insurance DATE,
    observation VARCHAR2(300),
    creation_register DATE DEFAULT SYSDATE NOT NULL,
    status CHAR(1) DEFAULT 'A' NOT NULL
);

-- Restricciones de la tabla vehicle
ALTER TABLE vehicle ADD CONSTRAINT uk_vehicle_plate UNIQUE (plate);
ALTER TABLE vehicle ADD CONSTRAINT ck_vehicle_status CHECK (status IN ('A','I','M','F')); -- A=Activo, I=Inactivo, M=Mantenimiento, F=Fuera de servicio
ALTER TABLE vehicle ADD CONSTRAINT ck_vehicle_capacity CHECK (load_capacity >= 0);
ALTER TABLE vehicle ADD CONSTRAINT ck_vehicle_plate_format CHECK (REGEXP_LIKE(plate, '^[A-Z0-9\-]+$'));
ALTER TABLE vehicle ADD CONSTRAINT ck_vehicle_revision_dates CHECK (next_review > last_revision_date OR next_review IS NULL OR last_revision_date IS NULL);

-- Índices para vehicle
CREATE INDEX idx_vehicle_type ON vehicle(vehicle_type);
CREATE INDEX idx_vehicle_status ON vehicle(status);
CREATE INDEX idx_vehicle_next_review ON vehicle(next_review);


-- TABLA DE ASIGNACIÓN VEHÍCULO-CONDUCTOR

CREATE TABLE vehicle_driver (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    driver_id NUMBER NOT NULL,
    vehicle_id NUMBER NOT NULL,
    assignment_date DATE NOT NULL,
    deallocation_date DATE,
    is_main CHAR(1) DEFAULT 'N' NOT NULL,
    status CHAR(1) DEFAULT 'A' NOT NULL,
    observation VARCHAR2(250),
    creation_register DATE DEFAULT SYSDATE NOT NULL
);

-- Restricciones de la tabla vehicle_driver
ALTER TABLE vehicle_driver ADD CONSTRAINT uk_vehicle_driver_assignment UNIQUE (driver_id, vehicle_id, assignment_date);
ALTER TABLE vehicle_driver ADD CONSTRAINT ck_vehicle_driver_is_main CHECK (is_main IN ('S','N')); -- S=Sí, N=No
ALTER TABLE vehicle_driver ADD CONSTRAINT ck_vehicle_driver_status CHECK (status IN ('A','I')); -- A=Activo, I=Inactivo
ALTER TABLE vehicle_driver ADD CONSTRAINT ck_vehicle_driver_dates CHECK (deallocation_date >= assignment_date OR deallocation_date IS NULL);

-- Índices para vehicle_driver
CREATE INDEX idx_vehicle_driver_driver ON vehicle_driver(driver_id);
CREATE INDEX idx_vehicle_driver_vehicle ON vehicle_driver(vehicle_id);
CREATE INDEX idx_vehicle_driver_date ON vehicle_driver(assignment_date);


-- TABLA DE RUTAS

CREATE TABLE routes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(150) NOT NULL,
    description VARCHAR2(250),
    main_district VARCHAR2(100) NOT NULL,
    distance_km NUMBER(6,2),
    estimated_time_minutes NUMBER,
    difficulty VARCHAR2(15) DEFAULT 'medio' NOT NULL,
    status CHAR(1) DEFAULT 'A' NOT NULL,
    date_register TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla routes
ALTER TABLE routes ADD CONSTRAINT ck_routes_difficulty CHECK (difficulty IN ('facil', 'medio', 'dificil'));
ALTER TABLE routes ADD CONSTRAINT ck_routes_status CHECK (status IN ('A','I')); -- A=Activo, I=Inactivo
ALTER TABLE routes ADD CONSTRAINT ck_routes_distance CHECK (distance_km > 0 OR distance_km IS NULL);
ALTER TABLE routes ADD CONSTRAINT ck_routes_time CHECK (estimated_time_minutes > 0 OR estimated_time_minutes IS NULL);
ALTER TABLE routes ADD CONSTRAINT ck_routes_name_length CHECK (LENGTH(name) >= 5);


-- TABLA DE PUNTOS DE RUTA

CREATE TABLE routes_points (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    routes_id NUMBER NOT NULL,
    "order" NUMBER NOT NULL,
    name VARCHAR2(50),
    description VARCHAR2(250),
    latitude NUMBER(10,8),
    length NUMBER(11,8),
    point_type VARCHAR2(20) DEFAULT 'intermedio' NOT NULL,
    estimated_time_minutes NUMBER,
    distance_meters NUMBER,
    observation VARCHAR2(250),
    status CHAR(1) DEFAULT 'A' NOT NULL,
    date_register TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla routes_points
ALTER TABLE routes_points ADD CONSTRAINT uk_routes_points_order UNIQUE (routes_id, "order");
ALTER TABLE routes_points ADD CONSTRAINT ck_routes_points_type CHECK (point_type IN ('inicio', 'intermedio', 'destino', 'referencia'));
ALTER TABLE routes_points ADD CONSTRAINT ck_routes_points_status CHECK (status IN ('A','I')); -- A=Activo, I=Inactivo
ALTER TABLE routes_points ADD CONSTRAINT ck_routes_points_order_positive CHECK ("order" > 0);
ALTER TABLE routes_points ADD CONSTRAINT ck_routes_points_latitude CHECK (latitude BETWEEN -90 AND 90 OR latitude IS NULL);
ALTER TABLE routes_points ADD CONSTRAINT ck_routes_points_longitude CHECK (length BETWEEN -180 AND 180 OR length IS NULL);
ALTER TABLE routes_points ADD CONSTRAINT ck_routes_points_time CHECK (estimated_time_minutes >= 0 OR estimated_time_minutes IS NULL);
ALTER TABLE routes_points ADD CONSTRAINT ck_routes_points_distance CHECK (distance_meters >= 0 OR distance_meters IS NULL);


-- TABLA DE SEGMENTOS DE RUTA

CREATE TABLE route_segments (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    routes_id NUMBER NOT NULL,
    origin_point NUMBER NOT NULL,
    destination_point NUMBER NOT NULL,
    order_segment NUMBER NOT NULL,
    instruction VARCHAR2(250),
    address VARCHAR2(20),
    street_name VARCHAR2(50),
    distance_meters NUMBER,
    estimated_time_minutes NUMBER,
    average_speed NUMBER(4,1),
    difficulty VARCHAR2(15) DEFAULT 'medio' NOT NULL,
    via_type VARCHAR2(20) DEFAULT 'calle' NOT NULL,
    trafficlight CHAR(1) DEFAULT 'N' NOT NULL,
    toll CHAR(1) DEFAULT 'N' NOT NULL,
    earring VARCHAR2(20) DEFAULT 'plano' NOT NULL,
    regular_traffic VARCHAR2(20) DEFAULT 'medio' NOT NULL,
    date_register TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla route_segments
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_address CHECK (address IN ('recto', 'derecha', 'izquierda', 'retorno', 'rotonda'));
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_difficulty CHECK (difficulty IN ('facil', 'medio', 'dificil'));
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_via_type CHECK (via_type IN ('avenida', 'calle', 'jiron', 'autopista', 'ciclovia'));
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_trafficlight CHECK (trafficlight IN ('S','N')); -- S=Sí, N=No
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_toll CHECK (toll IN ('S','N')); -- S=Sí, N=No
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_earring CHECK (earring IN ('plano', 'subida', 'bajada'));
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_traffic CHECK (regular_traffic IN ('bajo', 'medio', 'alto'));
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_points CHECK (origin_point != destination_point);
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_order CHECK (order_segment > 0);
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_distance CHECK (distance_meters >= 0 OR distance_meters IS NULL);
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_time CHECK (estimated_time_minutes >= 0 OR estimated_time_minutes IS NULL);
ALTER TABLE route_segments ADD CONSTRAINT ck_route_segments_speed CHECK (average_speed > 0 OR average_speed IS NULL);


-- TABLA DE RUTAS ORIGEN-DESTINO

CREATE TABLE origin_destination_routes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    source_address NUMBER NOT NULL,
    destination_address NUMBER NOT NULL,
    main_path NUMBER NOT NULL,
    alternative_route NUMBER,
    distance_km NUMBER(6,2),
    average_time_minutes NUMBER,
    times_used NUMBER DEFAULT 0,
    average_rating NUMBER(3,2) DEFAULT 0,
    status CHAR(1) DEFAULT 'A' NOT NULL,
    date_register TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla origin_destination_routes
ALTER TABLE origin_destination_routes ADD CONSTRAINT uk_odr_addresses UNIQUE (source_address, destination_address);
ALTER TABLE origin_destination_routes ADD CONSTRAINT ck_odr_status CHECK (status IN ('A','I')); -- A=Activo, I=Inactivo
ALTER TABLE origin_destination_routes ADD CONSTRAINT ck_odr_addresses_different CHECK (source_address != destination_address);
ALTER TABLE origin_destination_routes ADD CONSTRAINT ck_odr_routes_different CHECK (main_path != alternative_route OR alternative_route IS NULL);
ALTER TABLE origin_destination_routes ADD CONSTRAINT ck_odr_distance CHECK (distance_km > 0 OR distance_km IS NULL);
ALTER TABLE origin_destination_routes ADD CONSTRAINT ck_odr_time CHECK (average_time_minutes > 0 OR average_time_minutes IS NULL);
ALTER TABLE origin_destination_routes ADD CONSTRAINT ck_odr_times_used CHECK (times_used >= 0);
ALTER TABLE origin_destination_routes ADD CONSTRAINT ck_odr_rating CHECK (average_rating BETWEEN 0 AND 5 OR average_rating IS NULL);


-- TABLA DE RUTAS FAVORITAS POR CONDUCTOR

CREATE TABLE driver_favorite_routes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    driver_id NUMBER NOT NULL,
    routes_id NUMBER NOT NULL,
    times_used NUMBER DEFAULT 1,
    average_time_minutes NUMBER,
    average_rating NUMBER(3,2),
    personal_notes VARCHAR2(250),
    first_date_ DATE,
    last_date DATE,
    status CHAR(1) DEFAULT 'A' NOT NULL
);

-- Restricciones de la tabla driver_favorite_routes
ALTER TABLE driver_favorite_routes ADD CONSTRAINT uk_dfr_driver_route UNIQUE (driver_id, routes_id);
ALTER TABLE driver_favorite_routes ADD CONSTRAINT ck_dfr_status CHECK (status IN ('A','I')); -- A=Activo, I=Inactivo
ALTER TABLE driver_favorite_routes ADD CONSTRAINT ck_dfr_times_used CHECK (times_used > 0);
ALTER TABLE driver_favorite_routes ADD CONSTRAINT ck_dfr_time CHECK (average_time_minutes > 0 OR average_time_minutes IS NULL);
ALTER TABLE driver_favorite_routes ADD CONSTRAINT ck_dfr_rating CHECK (average_rating BETWEEN 0 AND 5 OR average_rating IS NULL);
ALTER TABLE driver_favorite_routes ADD CONSTRAINT ck_dfr_dates CHECK (last_date >= first_date_ OR last_date IS NULL OR first_date_ IS NULL);


-- TABLA DE ASIGNACIONES DE CONDUCTORES

CREATE TABLE driver_assignments (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    driver_id NUMBER NOT NULL,
    routes_id NUMBER NOT NULL,
    assignment_date DATE NOT NULL,
    start_time DATE,
    end_time DATE,
    status VARCHAR2(15) DEFAULT 'programada' NOT NULL,
    observation VARCHAR2(150),
    date_register TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla driver_assignments
ALTER TABLE driver_assignments ADD CONSTRAINT uk_da_driver_date UNIQUE (driver_id, assignment_date);
ALTER TABLE driver_assignments ADD CONSTRAINT ck_da_status CHECK (status IN ('programada', 'en_curso', 'completada', 'cancelada'));
ALTER TABLE driver_assignments ADD CONSTRAINT ck_da_times CHECK (end_time >= start_time OR end_time IS NULL OR start_time IS NULL);


-- TABLA DE RUTAS DE ENTREGA

CREATE TABLE delivery_routes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    deliveries_id NUMBER NOT NULL,
    routes_id NUMBER NOT NULL,
    usage_type CHAR(1) DEFAULT 'P' NOT NULL,
    deviations NUMBER DEFAULT 0,
    actual_time_minutes NUMBER,
    actual_distance_km NUMBER(6,2),
    route_rating NUMBER(1),
    remarks VARCHAR2(200),
    usage_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla delivery_routes
ALTER TABLE delivery_routes ADD CONSTRAINT ck_dr_usage_type CHECK (usage_type IN ('P','E','A')); -- P=Planificada, E=Ejecutada, A=Alternativa
ALTER TABLE delivery_routes ADD CONSTRAINT ck_dr_deviations CHECK (deviations >= 0);
ALTER TABLE delivery_routes ADD CONSTRAINT ck_dr_time CHECK (actual_time_minutes > 0 OR actual_time_minutes IS NULL);
ALTER TABLE delivery_routes ADD CONSTRAINT ck_dr_distance CHECK (actual_distance_km >= 0 OR actual_distance_km IS NULL);
ALTER TABLE delivery_routes ADD CONSTRAINT ck_dr_rating CHECK (route_rating BETWEEN 1 AND 5 OR route_rating IS NULL);
