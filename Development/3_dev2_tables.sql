CREATE TABLE orders (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    users_id NUMBER NOT NULL,
    order_code VARCHAR2(20) NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    requested_delivery_date DATE,
    priority CHAR(1) DEFAULT 'N' NOT NULL,
    subtotal NUMBER(10,2) DEFAULT 0.00,
    shipping_cost NUMBER(8,2) DEFAULT 0.00,
    total NUMBER(10,2) DEFAULT 0.00,
    status CHAR(1) DEFAULT 'R' NOT NULL
);

-- Restricciones de la tabla orders
ALTER TABLE orders ADD CONSTRAINT uk_orders_code UNIQUE (order_code);
ALTER TABLE orders ADD CONSTRAINT ck_orders_priority CHECK (priority IN ('B','N','A','U'));
ALTER TABLE orders ADD CONSTRAINT ck_orders_status CHECK (status IN ('R','C','P','T','E','X'));
ALTER TABLE orders ADD CONSTRAINT ck_orders_amounts CHECK (subtotal >= 0 AND shipping_cost >= 0 AND total >= 0);
ALTER TABLE orders ADD CONSTRAINT ck_orders_total CHECK (total = subtotal + shipping_cost);
ALTER TABLE orders ADD CONSTRAINT ck_orders_delivery_date CHECK (requested_delivery_date >= TRUNC(order_date));
ALTER TABLE orders ADD CONSTRAINT ck_orders_code_format CHECK (REGEXP_LIKE(order_code, '^[A-Z0-9\-]+$'));

-- Índices para orders
CREATE INDEX idx_orders_client ON orders(users_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_date ON orders(order_date);
CREATE INDEX idx_orders_priority ON orders(priority);

-- TABLA DE DETALLE DE PEDIDOS

CREATE TABLE order_details (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orders_id NUMBER NOT NULL,
    quantity NUMBER DEFAULT 1 NOT NULL,
    unit_price NUMBER(10,2)
);

-- Restricciones de la tabla order_details
ALTER TABLE order_details ADD CONSTRAINT ck_order_details_quantity CHECK (quantity > 0);
ALTER TABLE order_details ADD CONSTRAINT ck_order_details_price CHECK (unit_price >= 0 OR unit_price IS NULL);


-- TABLA DE PRODUCTOS

CREATE TABLE product (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orders_id NUMBER NOT NULL,
    code VARCHAR2(20) NOT NULL,
    name VARCHAR2(30) NOT NULL,
    description VARCHAR2(100),
    unit_weight NUMBER(6,3),
    fragile CHAR(1) DEFAULT 'N' NOT NULL,
    cooled CHAR(1) DEFAULT 'N' NOT NULL,
    reference_price NUMBER(10,2),
    date_register TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    status CHAR(1) DEFAULT 'A' NOT NULL
);

-- Restricciones de la tabla product
ALTER TABLE product ADD CONSTRAINT uk_product_code UNIQUE (code);
ALTER TABLE product ADD CONSTRAINT ck_product_fragile CHECK (fragile IN ('S','N')); -- S=Sí, N=No
ALTER TABLE product ADD CONSTRAINT ck_product_cooled CHECK (cooled IN ('S','N')); -- S=Sí, N=No
ALTER TABLE product ADD CONSTRAINT ck_product_status CHECK (status IN ('A','I')); -- A=Activo, I=Inactivo
ALTER TABLE product ADD CONSTRAINT ck_product_weight CHECK (unit_weight > 0 OR unit_weight IS NULL);
ALTER TABLE product ADD CONSTRAINT ck_product_price CHECK (reference_price >= 0 OR reference_price IS NULL);
ALTER TABLE product ADD CONSTRAINT ck_product_name_length CHECK (LENGTH(name) >= 2);

CREATE TABLE status_tracking (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    orders_id NUMBER NOT NULL,
    previous_status VARCHAR2(20),
    new_status VARCHAR2(20) NOT NULL,
    "comment" VARCHAR2(200),
    "user" VARCHAR2(100),
    change_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

-- Restricciones de la tabla status_tracking
ALTER TABLE status_tracking ADD CONSTRAINT ck_st_statuses_different CHECK (previous_status != new_status OR previous_status IS NULL);
